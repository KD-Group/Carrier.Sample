/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef carrier_TYPES_H
#define carrier_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace TCarrier {

struct TReturnCode {
  enum type {
    SUCCESS = 0,
    COMMAND_NOT_FOUND = 1,
    SAMPLER_NOT_FOUND = 2,
    IN_MEASURING = 3,
    VOLTAGE_NOT_ENOUGH = 4,
    REAL_SAMPLER_ERROR = 5,
    WAVE_NOT_FOUND = 6,
    APPROPRIATE_PERCENT_WAVE_NOT_FOUND = 7
  };
};

extern const std::map<int, const char*> _TReturnCode_VALUES_TO_NAMES;

class TResult;

class TSamplingConfig;


class TResult : public virtual ::apache::thrift::TBase {
 public:

  TResult(const TResult&);
  TResult& operator=(const TResult&);
  TResult() : error(0), message(), sampler_name(), measuring(0), max_voltage(0), min_voltage(0), sampling_interval(0), tau(0) {
  }

  virtual ~TResult() throw();
  std::map<std::string, std::string>  ErrorMessageMapper;
  bool error;
  std::string message;
  std::string sampler_name;
  bool measuring;
  double max_voltage;
  double min_voltage;
  double sampling_interval;
  std::vector<double>  wave;
  double tau;

  void __set_ErrorMessageMapper(const std::map<std::string, std::string> & val);

  void __set_error(const bool val);

  void __set_message(const std::string& val);

  void __set_sampler_name(const std::string& val);

  void __set_measuring(const bool val);

  void __set_max_voltage(const double val);

  void __set_min_voltage(const double val);

  void __set_sampling_interval(const double val);

  void __set_wave(const std::vector<double> & val);

  void __set_tau(const double val);

  bool operator == (const TResult & rhs) const
  {
    if (!(ErrorMessageMapper == rhs.ErrorMessageMapper))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(sampler_name == rhs.sampler_name))
      return false;
    if (!(measuring == rhs.measuring))
      return false;
    if (!(max_voltage == rhs.max_voltage))
      return false;
    if (!(min_voltage == rhs.min_voltage))
      return false;
    if (!(sampling_interval == rhs.sampling_interval))
      return false;
    if (!(wave == rhs.wave))
      return false;
    if (!(tau == rhs.tau))
      return false;
    return true;
  }
  bool operator != (const TResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResult &a, TResult &b);

inline std::ostream& operator<<(std::ostream& out, const TResult& obj)
{
  obj.printTo(out);
  return out;
}


class TSamplingConfig : public virtual ::apache::thrift::TBase {
 public:

  TSamplingConfig(const TSamplingConfig&);
  TSamplingConfig& operator=(const TSamplingConfig&);
  TSamplingConfig() : number_of_waveforms(0), first_percent(0), second_percent(0) {
  }

  virtual ~TSamplingConfig() throw();
  int8_t number_of_waveforms;
  double first_percent;
  double second_percent;

  void __set_number_of_waveforms(const int8_t val);

  void __set_first_percent(const double val);

  void __set_second_percent(const double val);

  bool operator == (const TSamplingConfig & rhs) const
  {
    if (!(number_of_waveforms == rhs.number_of_waveforms))
      return false;
    if (!(first_percent == rhs.first_percent))
      return false;
    if (!(second_percent == rhs.second_percent))
      return false;
    return true;
  }
  bool operator != (const TSamplingConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSamplingConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSamplingConfig &a, TSamplingConfig &b);

inline std::ostream& operator<<(std::ostream& out, const TSamplingConfig& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
