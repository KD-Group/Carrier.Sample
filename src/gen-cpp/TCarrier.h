/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TCarrier_H
#define TCarrier_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "carrier_types.h"

namespace TCarrier {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TCarrierIf {
 public:
  virtual ~TCarrierIf() {}
  virtual TReturnCode::type set_sampler(const std::string& sampler_name) = 0;
  virtual void get_sampler(std::string& _return) = 0;
  virtual TReturnCode::type set_sampler_value(const std::string& key, const double value) = 0;
  virtual void get_sampler_value(std::string& _return, const std::string& key) = 0;
  virtual bool is_measuring() = 0;
  virtual TReturnCode::type measure(const TSamplingConfig& config) = 0;
  virtual void to_query(TResult& _return) = 0;
};

class TCarrierIfFactory {
 public:
  typedef TCarrierIf Handler;

  virtual ~TCarrierIfFactory() {}

  virtual TCarrierIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TCarrierIf* /* handler */) = 0;
};

class TCarrierIfSingletonFactory : virtual public TCarrierIfFactory {
 public:
  TCarrierIfSingletonFactory(const boost::shared_ptr<TCarrierIf>& iface) : iface_(iface) {}
  virtual ~TCarrierIfSingletonFactory() {}

  virtual TCarrierIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TCarrierIf* /* handler */) {}

 protected:
  boost::shared_ptr<TCarrierIf> iface_;
};

class TCarrierNull : virtual public TCarrierIf {
 public:
  virtual ~TCarrierNull() {}
  TReturnCode::type set_sampler(const std::string& /* sampler_name */) {
    TReturnCode::type _return = (TReturnCode::type)0;
    return _return;
  }
  void get_sampler(std::string& /* _return */) {
    return;
  }
  TReturnCode::type set_sampler_value(const std::string& /* key */, const double /* value */) {
    TReturnCode::type _return = (TReturnCode::type)0;
    return _return;
  }
  void get_sampler_value(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  bool is_measuring() {
    bool _return = false;
    return _return;
  }
  TReturnCode::type measure(const TSamplingConfig& /* config */) {
    TReturnCode::type _return = (TReturnCode::type)0;
    return _return;
  }
  void to_query(TResult& /* _return */) {
    return;
  }
};

typedef struct _TCarrier_set_sampler_args__isset {
  _TCarrier_set_sampler_args__isset() : sampler_name(false) {}
  bool sampler_name :1;
} _TCarrier_set_sampler_args__isset;

class TCarrier_set_sampler_args {
 public:

  TCarrier_set_sampler_args(const TCarrier_set_sampler_args&);
  TCarrier_set_sampler_args& operator=(const TCarrier_set_sampler_args&);
  TCarrier_set_sampler_args() : sampler_name() {
  }

  virtual ~TCarrier_set_sampler_args() throw();
  std::string sampler_name;

  _TCarrier_set_sampler_args__isset __isset;

  void __set_sampler_name(const std::string& val);

  bool operator == (const TCarrier_set_sampler_args & rhs) const
  {
    if (!(sampler_name == rhs.sampler_name))
      return false;
    return true;
  }
  bool operator != (const TCarrier_set_sampler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_set_sampler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_set_sampler_pargs {
 public:


  virtual ~TCarrier_set_sampler_pargs() throw();
  const std::string* sampler_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_set_sampler_result__isset {
  _TCarrier_set_sampler_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_set_sampler_result__isset;

class TCarrier_set_sampler_result {
 public:

  TCarrier_set_sampler_result(const TCarrier_set_sampler_result&);
  TCarrier_set_sampler_result& operator=(const TCarrier_set_sampler_result&);
  TCarrier_set_sampler_result() : success((TReturnCode::type)0) {
  }

  virtual ~TCarrier_set_sampler_result() throw();
  TReturnCode::type success;

  _TCarrier_set_sampler_result__isset __isset;

  void __set_success(const TReturnCode::type val);

  bool operator == (const TCarrier_set_sampler_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_set_sampler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_set_sampler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_set_sampler_presult__isset {
  _TCarrier_set_sampler_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_set_sampler_presult__isset;

class TCarrier_set_sampler_presult {
 public:


  virtual ~TCarrier_set_sampler_presult() throw();
  TReturnCode::type* success;

  _TCarrier_set_sampler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TCarrier_get_sampler_args {
 public:

  TCarrier_get_sampler_args(const TCarrier_get_sampler_args&);
  TCarrier_get_sampler_args& operator=(const TCarrier_get_sampler_args&);
  TCarrier_get_sampler_args() {
  }

  virtual ~TCarrier_get_sampler_args() throw();

  bool operator == (const TCarrier_get_sampler_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TCarrier_get_sampler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_get_sampler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_get_sampler_pargs {
 public:


  virtual ~TCarrier_get_sampler_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_get_sampler_result__isset {
  _TCarrier_get_sampler_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_get_sampler_result__isset;

class TCarrier_get_sampler_result {
 public:

  TCarrier_get_sampler_result(const TCarrier_get_sampler_result&);
  TCarrier_get_sampler_result& operator=(const TCarrier_get_sampler_result&);
  TCarrier_get_sampler_result() : success() {
  }

  virtual ~TCarrier_get_sampler_result() throw();
  std::string success;

  _TCarrier_get_sampler_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TCarrier_get_sampler_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_get_sampler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_get_sampler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_get_sampler_presult__isset {
  _TCarrier_get_sampler_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_get_sampler_presult__isset;

class TCarrier_get_sampler_presult {
 public:


  virtual ~TCarrier_get_sampler_presult() throw();
  std::string* success;

  _TCarrier_get_sampler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TCarrier_set_sampler_value_args__isset {
  _TCarrier_set_sampler_value_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _TCarrier_set_sampler_value_args__isset;

class TCarrier_set_sampler_value_args {
 public:

  TCarrier_set_sampler_value_args(const TCarrier_set_sampler_value_args&);
  TCarrier_set_sampler_value_args& operator=(const TCarrier_set_sampler_value_args&);
  TCarrier_set_sampler_value_args() : key(), value(0) {
  }

  virtual ~TCarrier_set_sampler_value_args() throw();
  std::string key;
  double value;

  _TCarrier_set_sampler_value_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const double val);

  bool operator == (const TCarrier_set_sampler_value_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TCarrier_set_sampler_value_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_set_sampler_value_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_set_sampler_value_pargs {
 public:


  virtual ~TCarrier_set_sampler_value_pargs() throw();
  const std::string* key;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_set_sampler_value_result__isset {
  _TCarrier_set_sampler_value_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_set_sampler_value_result__isset;

class TCarrier_set_sampler_value_result {
 public:

  TCarrier_set_sampler_value_result(const TCarrier_set_sampler_value_result&);
  TCarrier_set_sampler_value_result& operator=(const TCarrier_set_sampler_value_result&);
  TCarrier_set_sampler_value_result() : success((TReturnCode::type)0) {
  }

  virtual ~TCarrier_set_sampler_value_result() throw();
  TReturnCode::type success;

  _TCarrier_set_sampler_value_result__isset __isset;

  void __set_success(const TReturnCode::type val);

  bool operator == (const TCarrier_set_sampler_value_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_set_sampler_value_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_set_sampler_value_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_set_sampler_value_presult__isset {
  _TCarrier_set_sampler_value_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_set_sampler_value_presult__isset;

class TCarrier_set_sampler_value_presult {
 public:


  virtual ~TCarrier_set_sampler_value_presult() throw();
  TReturnCode::type* success;

  _TCarrier_set_sampler_value_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TCarrier_get_sampler_value_args__isset {
  _TCarrier_get_sampler_value_args__isset() : key(false) {}
  bool key :1;
} _TCarrier_get_sampler_value_args__isset;

class TCarrier_get_sampler_value_args {
 public:

  TCarrier_get_sampler_value_args(const TCarrier_get_sampler_value_args&);
  TCarrier_get_sampler_value_args& operator=(const TCarrier_get_sampler_value_args&);
  TCarrier_get_sampler_value_args() : key() {
  }

  virtual ~TCarrier_get_sampler_value_args() throw();
  std::string key;

  _TCarrier_get_sampler_value_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const TCarrier_get_sampler_value_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TCarrier_get_sampler_value_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_get_sampler_value_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_get_sampler_value_pargs {
 public:


  virtual ~TCarrier_get_sampler_value_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_get_sampler_value_result__isset {
  _TCarrier_get_sampler_value_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_get_sampler_value_result__isset;

class TCarrier_get_sampler_value_result {
 public:

  TCarrier_get_sampler_value_result(const TCarrier_get_sampler_value_result&);
  TCarrier_get_sampler_value_result& operator=(const TCarrier_get_sampler_value_result&);
  TCarrier_get_sampler_value_result() : success() {
  }

  virtual ~TCarrier_get_sampler_value_result() throw();
  std::string success;

  _TCarrier_get_sampler_value_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TCarrier_get_sampler_value_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_get_sampler_value_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_get_sampler_value_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_get_sampler_value_presult__isset {
  _TCarrier_get_sampler_value_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_get_sampler_value_presult__isset;

class TCarrier_get_sampler_value_presult {
 public:


  virtual ~TCarrier_get_sampler_value_presult() throw();
  std::string* success;

  _TCarrier_get_sampler_value_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TCarrier_is_measuring_args {
 public:

  TCarrier_is_measuring_args(const TCarrier_is_measuring_args&);
  TCarrier_is_measuring_args& operator=(const TCarrier_is_measuring_args&);
  TCarrier_is_measuring_args() {
  }

  virtual ~TCarrier_is_measuring_args() throw();

  bool operator == (const TCarrier_is_measuring_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TCarrier_is_measuring_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_is_measuring_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_is_measuring_pargs {
 public:


  virtual ~TCarrier_is_measuring_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_is_measuring_result__isset {
  _TCarrier_is_measuring_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_is_measuring_result__isset;

class TCarrier_is_measuring_result {
 public:

  TCarrier_is_measuring_result(const TCarrier_is_measuring_result&);
  TCarrier_is_measuring_result& operator=(const TCarrier_is_measuring_result&);
  TCarrier_is_measuring_result() : success(0) {
  }

  virtual ~TCarrier_is_measuring_result() throw();
  bool success;

  _TCarrier_is_measuring_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TCarrier_is_measuring_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_is_measuring_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_is_measuring_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_is_measuring_presult__isset {
  _TCarrier_is_measuring_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_is_measuring_presult__isset;

class TCarrier_is_measuring_presult {
 public:


  virtual ~TCarrier_is_measuring_presult() throw();
  bool* success;

  _TCarrier_is_measuring_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TCarrier_measure_args__isset {
  _TCarrier_measure_args__isset() : config(false) {}
  bool config :1;
} _TCarrier_measure_args__isset;

class TCarrier_measure_args {
 public:

  TCarrier_measure_args(const TCarrier_measure_args&);
  TCarrier_measure_args& operator=(const TCarrier_measure_args&);
  TCarrier_measure_args() {
  }

  virtual ~TCarrier_measure_args() throw();
  TSamplingConfig config;

  _TCarrier_measure_args__isset __isset;

  void __set_config(const TSamplingConfig& val);

  bool operator == (const TCarrier_measure_args & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const TCarrier_measure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_measure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_measure_pargs {
 public:


  virtual ~TCarrier_measure_pargs() throw();
  const TSamplingConfig* config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_measure_result__isset {
  _TCarrier_measure_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_measure_result__isset;

class TCarrier_measure_result {
 public:

  TCarrier_measure_result(const TCarrier_measure_result&);
  TCarrier_measure_result& operator=(const TCarrier_measure_result&);
  TCarrier_measure_result() : success((TReturnCode::type)0) {
  }

  virtual ~TCarrier_measure_result() throw();
  TReturnCode::type success;

  _TCarrier_measure_result__isset __isset;

  void __set_success(const TReturnCode::type val);

  bool operator == (const TCarrier_measure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_measure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_measure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_measure_presult__isset {
  _TCarrier_measure_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_measure_presult__isset;

class TCarrier_measure_presult {
 public:


  virtual ~TCarrier_measure_presult() throw();
  TReturnCode::type* success;

  _TCarrier_measure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TCarrier_to_query_args {
 public:

  TCarrier_to_query_args(const TCarrier_to_query_args&);
  TCarrier_to_query_args& operator=(const TCarrier_to_query_args&);
  TCarrier_to_query_args() {
  }

  virtual ~TCarrier_to_query_args() throw();

  bool operator == (const TCarrier_to_query_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TCarrier_to_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_to_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCarrier_to_query_pargs {
 public:


  virtual ~TCarrier_to_query_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_to_query_result__isset {
  _TCarrier_to_query_result__isset() : success(false) {}
  bool success :1;
} _TCarrier_to_query_result__isset;

class TCarrier_to_query_result {
 public:

  TCarrier_to_query_result(const TCarrier_to_query_result&);
  TCarrier_to_query_result& operator=(const TCarrier_to_query_result&);
  TCarrier_to_query_result() {
  }

  virtual ~TCarrier_to_query_result() throw();
  TResult success;

  _TCarrier_to_query_result__isset __isset;

  void __set_success(const TResult& val);

  bool operator == (const TCarrier_to_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCarrier_to_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCarrier_to_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCarrier_to_query_presult__isset {
  _TCarrier_to_query_presult__isset() : success(false) {}
  bool success :1;
} _TCarrier_to_query_presult__isset;

class TCarrier_to_query_presult {
 public:


  virtual ~TCarrier_to_query_presult() throw();
  TResult* success;

  _TCarrier_to_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TCarrierClient : virtual public TCarrierIf {
 public:
  TCarrierClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TCarrierClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  TReturnCode::type set_sampler(const std::string& sampler_name);
  void send_set_sampler(const std::string& sampler_name);
  TReturnCode::type recv_set_sampler();
  void get_sampler(std::string& _return);
  void send_get_sampler();
  void recv_get_sampler(std::string& _return);
  TReturnCode::type set_sampler_value(const std::string& key, const double value);
  void send_set_sampler_value(const std::string& key, const double value);
  TReturnCode::type recv_set_sampler_value();
  void get_sampler_value(std::string& _return, const std::string& key);
  void send_get_sampler_value(const std::string& key);
  void recv_get_sampler_value(std::string& _return);
  bool is_measuring();
  void send_is_measuring();
  bool recv_is_measuring();
  TReturnCode::type measure(const TSamplingConfig& config);
  void send_measure(const TSamplingConfig& config);
  TReturnCode::type recv_measure();
  void to_query(TResult& _return);
  void send_to_query();
  void recv_to_query(TResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TCarrierProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TCarrierIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TCarrierProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_set_sampler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_sampler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_sampler_value(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_sampler_value(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_measuring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_measure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_to_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TCarrierProcessor(boost::shared_ptr<TCarrierIf> iface) :
    iface_(iface) {
    processMap_["set_sampler"] = &TCarrierProcessor::process_set_sampler;
    processMap_["get_sampler"] = &TCarrierProcessor::process_get_sampler;
    processMap_["set_sampler_value"] = &TCarrierProcessor::process_set_sampler_value;
    processMap_["get_sampler_value"] = &TCarrierProcessor::process_get_sampler_value;
    processMap_["is_measuring"] = &TCarrierProcessor::process_is_measuring;
    processMap_["measure"] = &TCarrierProcessor::process_measure;
    processMap_["to_query"] = &TCarrierProcessor::process_to_query;
  }

  virtual ~TCarrierProcessor() {}
};

class TCarrierProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TCarrierProcessorFactory(const ::boost::shared_ptr< TCarrierIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TCarrierIfFactory > handlerFactory_;
};

class TCarrierMultiface : virtual public TCarrierIf {
 public:
  TCarrierMultiface(std::vector<boost::shared_ptr<TCarrierIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TCarrierMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TCarrierIf> > ifaces_;
  TCarrierMultiface() {}
  void add(boost::shared_ptr<TCarrierIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  TReturnCode::type set_sampler(const std::string& sampler_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_sampler(sampler_name);
    }
    return ifaces_[i]->set_sampler(sampler_name);
  }

  void get_sampler(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_sampler(_return);
    }
    ifaces_[i]->get_sampler(_return);
    return;
  }

  TReturnCode::type set_sampler_value(const std::string& key, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_sampler_value(key, value);
    }
    return ifaces_[i]->set_sampler_value(key, value);
  }

  void get_sampler_value(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_sampler_value(_return, key);
    }
    ifaces_[i]->get_sampler_value(_return, key);
    return;
  }

  bool is_measuring() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_measuring();
    }
    return ifaces_[i]->is_measuring();
  }

  TReturnCode::type measure(const TSamplingConfig& config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->measure(config);
    }
    return ifaces_[i]->measure(config);
  }

  void to_query(TResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->to_query(_return);
    }
    ifaces_[i]->to_query(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TCarrierConcurrentClient : virtual public TCarrierIf {
 public:
  TCarrierConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TCarrierConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  TReturnCode::type set_sampler(const std::string& sampler_name);
  int32_t send_set_sampler(const std::string& sampler_name);
  TReturnCode::type recv_set_sampler(const int32_t seqid);
  void get_sampler(std::string& _return);
  int32_t send_get_sampler();
  void recv_get_sampler(std::string& _return, const int32_t seqid);
  TReturnCode::type set_sampler_value(const std::string& key, const double value);
  int32_t send_set_sampler_value(const std::string& key, const double value);
  TReturnCode::type recv_set_sampler_value(const int32_t seqid);
  void get_sampler_value(std::string& _return, const std::string& key);
  int32_t send_get_sampler_value(const std::string& key);
  void recv_get_sampler_value(std::string& _return, const int32_t seqid);
  bool is_measuring();
  int32_t send_is_measuring();
  bool recv_is_measuring(const int32_t seqid);
  TReturnCode::type measure(const TSamplingConfig& config);
  int32_t send_measure(const TSamplingConfig& config);
  TReturnCode::type recv_measure(const int32_t seqid);
  void to_query(TResult& _return);
  int32_t send_to_query();
  void recv_to_query(TResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
