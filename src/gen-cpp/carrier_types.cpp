/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "carrier_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TCarrier {

int _kTReturnCodeValues[] = {
  TReturnCode::SUCCESS,
  TReturnCode::COMMAND_NOT_FOUND,
  TReturnCode::SAMPLER_NOT_FOUND,
  TReturnCode::IN_MEASURING,
  TReturnCode::VOLTAGE_NOT_ENOUGH,
  TReturnCode::REAL_SAMPLER_ERROR,
  TReturnCode::WAVE_NOT_FOUND,
  TReturnCode::APPROPRIATE_PERCENT_WAVE_NOT_FOUND
};
const char* _kTReturnCodeNames[] = {
  "SUCCESS",
  "COMMAND_NOT_FOUND",
  "SAMPLER_NOT_FOUND",
  "IN_MEASURING",
  "VOLTAGE_NOT_ENOUGH",
  "REAL_SAMPLER_ERROR",
  "WAVE_NOT_FOUND",
  "APPROPRIATE_PERCENT_WAVE_NOT_FOUND"
};
const std::map<int, const char*> _TReturnCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTReturnCodeValues, _kTReturnCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TResult::~TResult() throw() {
}


void TResult::__set_ErrorMessageMapper(const std::map<std::string, std::string> & val) {
  this->ErrorMessageMapper = val;
}

void TResult::__set_error(const bool val) {
  this->error = val;
}

void TResult::__set_message(const std::string& val) {
  this->message = val;
}

void TResult::__set_sampler_name(const std::string& val) {
  this->sampler_name = val;
}

void TResult::__set_measuring(const bool val) {
  this->measuring = val;
}

void TResult::__set_max_voltage(const double val) {
  this->max_voltage = val;
}

void TResult::__set_min_voltage(const double val) {
  this->min_voltage = val;
}

void TResult::__set_sampling_interval(const double val) {
  this->sampling_interval = val;
}

void TResult::__set_wave(const std::vector<double> & val) {
  this->wave = val;
}

void TResult::__set_tau(const double val) {
  this->tau = val;
}

uint32_t TResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ErrorMessageMapper = false;
  bool isset_error = false;
  bool isset_message = false;
  bool isset_sampler_name = false;
  bool isset_measuring = false;
  bool isset_max_voltage = false;
  bool isset_min_voltage = false;
  bool isset_sampling_interval = false;
  bool isset_wave = false;
  bool isset_tau = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ErrorMessageMapper.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->ErrorMessageMapper[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_ErrorMessageMapper = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sampler_name);
          isset_sampler_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->measuring);
          isset_measuring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_voltage);
          isset_max_voltage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_voltage);
          isset_min_voltage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sampling_interval);
          isset_sampling_interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wave.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->wave.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readDouble(this->wave[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          isset_wave = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tau);
          isset_tau = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ErrorMessageMapper)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sampler_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_measuring)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_voltage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_voltage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sampling_interval)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_wave)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tau)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResult");

  xfer += oprot->writeFieldBegin("ErrorMessageMapper", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ErrorMessageMapper.size()));
    std::map<std::string, std::string> ::const_iterator _iter12;
    for (_iter12 = this->ErrorMessageMapper.begin(); _iter12 != this->ErrorMessageMapper.end(); ++_iter12)
    {
      xfer += oprot->writeString(_iter12->first);
      xfer += oprot->writeString(_iter12->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sampler_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sampler_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("measuring", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->measuring);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_voltage", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->max_voltage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_voltage", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->min_voltage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sampling_interval", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->sampling_interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wave", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->wave.size()));
    std::vector<double> ::const_iterator _iter13;
    for (_iter13 = this->wave.begin(); _iter13 != this->wave.end(); ++_iter13)
    {
      xfer += oprot->writeDouble((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tau", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->tau);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResult &a, TResult &b) {
  using ::std::swap;
  swap(a.ErrorMessageMapper, b.ErrorMessageMapper);
  swap(a.error, b.error);
  swap(a.message, b.message);
  swap(a.sampler_name, b.sampler_name);
  swap(a.measuring, b.measuring);
  swap(a.max_voltage, b.max_voltage);
  swap(a.min_voltage, b.min_voltage);
  swap(a.sampling_interval, b.sampling_interval);
  swap(a.wave, b.wave);
  swap(a.tau, b.tau);
}

TResult::TResult(const TResult& other14) {
  ErrorMessageMapper = other14.ErrorMessageMapper;
  error = other14.error;
  message = other14.message;
  sampler_name = other14.sampler_name;
  measuring = other14.measuring;
  max_voltage = other14.max_voltage;
  min_voltage = other14.min_voltage;
  sampling_interval = other14.sampling_interval;
  wave = other14.wave;
  tau = other14.tau;
}
TResult& TResult::operator=(const TResult& other15) {
  ErrorMessageMapper = other15.ErrorMessageMapper;
  error = other15.error;
  message = other15.message;
  sampler_name = other15.sampler_name;
  measuring = other15.measuring;
  max_voltage = other15.max_voltage;
  min_voltage = other15.min_voltage;
  sampling_interval = other15.sampling_interval;
  wave = other15.wave;
  tau = other15.tau;
  return *this;
}
void TResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResult(";
  out << "ErrorMessageMapper=" << to_string(ErrorMessageMapper);
  out << ", " << "error=" << to_string(error);
  out << ", " << "message=" << to_string(message);
  out << ", " << "sampler_name=" << to_string(sampler_name);
  out << ", " << "measuring=" << to_string(measuring);
  out << ", " << "max_voltage=" << to_string(max_voltage);
  out << ", " << "min_voltage=" << to_string(min_voltage);
  out << ", " << "sampling_interval=" << to_string(sampling_interval);
  out << ", " << "wave=" << to_string(wave);
  out << ", " << "tau=" << to_string(tau);
  out << ")";
}


TSamplingConfig::~TSamplingConfig() throw() {
}


void TSamplingConfig::__set_number_of_waveforms(const int8_t val) {
  this->number_of_waveforms = val;
}

void TSamplingConfig::__set_first_percent(const double val) {
  this->first_percent = val;
}

void TSamplingConfig::__set_second_percent(const double val) {
  this->second_percent = val;
}

uint32_t TSamplingConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_number_of_waveforms = false;
  bool isset_first_percent = false;
  bool isset_second_percent = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->number_of_waveforms);
          isset_number_of_waveforms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_percent);
          isset_first_percent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->second_percent);
          isset_second_percent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_number_of_waveforms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_first_percent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_second_percent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TSamplingConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSamplingConfig");

  xfer += oprot->writeFieldBegin("number_of_waveforms", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->number_of_waveforms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_percent", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->first_percent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_percent", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->second_percent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSamplingConfig &a, TSamplingConfig &b) {
  using ::std::swap;
  swap(a.number_of_waveforms, b.number_of_waveforms);
  swap(a.first_percent, b.first_percent);
  swap(a.second_percent, b.second_percent);
}

TSamplingConfig::TSamplingConfig(const TSamplingConfig& other16) {
  number_of_waveforms = other16.number_of_waveforms;
  first_percent = other16.first_percent;
  second_percent = other16.second_percent;
}
TSamplingConfig& TSamplingConfig::operator=(const TSamplingConfig& other17) {
  number_of_waveforms = other17.number_of_waveforms;
  first_percent = other17.first_percent;
  second_percent = other17.second_percent;
  return *this;
}
void TSamplingConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSamplingConfig(";
  out << "number_of_waveforms=" << to_string(number_of_waveforms);
  out << ", " << "first_percent=" << to_string(first_percent);
  out << ", " << "second_percent=" << to_string(second_percent);
  out << ")";
}

} // namespace
