#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class TReturnCode(object):
    SUCCESS = 0
    COMMAND_NOT_FOUND = 1
    SAMPLER_NOT_FOUND = 2
    IN_MEASURING = 3
    VOLTAGE_NOT_ENOUGH = 4
    REAL_SAMPLER_ERROR = 5
    WAVE_NOT_FOUND = 6
    APPROPRIATE_PERCENT_WAVE_NOT_FOUND = 7

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "COMMAND_NOT_FOUND",
        2: "SAMPLER_NOT_FOUND",
        3: "IN_MEASURING",
        4: "VOLTAGE_NOT_ENOUGH",
        5: "REAL_SAMPLER_ERROR",
        6: "WAVE_NOT_FOUND",
        7: "APPROPRIATE_PERCENT_WAVE_NOT_FOUND",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "COMMAND_NOT_FOUND": 1,
        "SAMPLER_NOT_FOUND": 2,
        "IN_MEASURING": 3,
        "VOLTAGE_NOT_ENOUGH": 4,
        "REAL_SAMPLER_ERROR": 5,
        "WAVE_NOT_FOUND": 6,
        "APPROPRIATE_PERCENT_WAVE_NOT_FOUND": 7,
    }


class TResult(object):
    """
    Attributes:
     - ErrorMessageMapper
     - error
     - message
     - sampler_name
     - measuring
     - max_voltage
     - min_voltage
     - sampling_interval
     - wave
     - tau
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'ErrorMessageMapper', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.BOOL, 'error', None, None, ),  # 2
        (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'sampler_name', 'UTF8', None, ),  # 4
        (5, TType.BOOL, 'measuring', None, None, ),  # 5
        (6, TType.DOUBLE, 'max_voltage', None, None, ),  # 6
        (7, TType.DOUBLE, 'min_voltage', None, None, ),  # 7
        (8, TType.DOUBLE, 'sampling_interval', None, None, ),  # 8
        (9, TType.LIST, 'wave', (TType.DOUBLE, None, False), None, ),  # 9
        (10, TType.DOUBLE, 'tau', None, None, ),  # 10
    )

    def __init__(self, ErrorMessageMapper=None, error=None, message=None, sampler_name=None, measuring=None, max_voltage=None, min_voltage=None, sampling_interval=None, wave=None, tau=None,):
        self.ErrorMessageMapper = ErrorMessageMapper
        self.error = error
        self.message = message
        self.sampler_name = sampler_name
        self.measuring = measuring
        self.max_voltage = max_voltage
        self.min_voltage = min_voltage
        self.sampling_interval = sampling_interval
        self.wave = wave
        self.tau = tau

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.ErrorMessageMapper = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ErrorMessageMapper[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sampler_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.measuring = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.max_voltage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.min_voltage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.sampling_interval = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.wave = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readDouble()
                        self.wave.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.tau = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TResult')
        if self.ErrorMessageMapper is not None:
            oprot.writeFieldBegin('ErrorMessageMapper', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ErrorMessageMapper))
            for kiter13, viter14 in self.ErrorMessageMapper.items():
                oprot.writeString(kiter13.encode('utf-8') if sys.version_info[0] == 2 else kiter13)
                oprot.writeString(viter14.encode('utf-8') if sys.version_info[0] == 2 else viter14)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.BOOL, 2)
            oprot.writeBool(self.error)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.sampler_name is not None:
            oprot.writeFieldBegin('sampler_name', TType.STRING, 4)
            oprot.writeString(self.sampler_name.encode('utf-8') if sys.version_info[0] == 2 else self.sampler_name)
            oprot.writeFieldEnd()
        if self.measuring is not None:
            oprot.writeFieldBegin('measuring', TType.BOOL, 5)
            oprot.writeBool(self.measuring)
            oprot.writeFieldEnd()
        if self.max_voltage is not None:
            oprot.writeFieldBegin('max_voltage', TType.DOUBLE, 6)
            oprot.writeDouble(self.max_voltage)
            oprot.writeFieldEnd()
        if self.min_voltage is not None:
            oprot.writeFieldBegin('min_voltage', TType.DOUBLE, 7)
            oprot.writeDouble(self.min_voltage)
            oprot.writeFieldEnd()
        if self.sampling_interval is not None:
            oprot.writeFieldBegin('sampling_interval', TType.DOUBLE, 8)
            oprot.writeDouble(self.sampling_interval)
            oprot.writeFieldEnd()
        if self.wave is not None:
            oprot.writeFieldBegin('wave', TType.LIST, 9)
            oprot.writeListBegin(TType.DOUBLE, len(self.wave))
            for iter15 in self.wave:
                oprot.writeDouble(iter15)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tau is not None:
            oprot.writeFieldBegin('tau', TType.DOUBLE, 10)
            oprot.writeDouble(self.tau)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ErrorMessageMapper is None:
            raise TProtocolException(message='Required field ErrorMessageMapper is unset!')
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.sampler_name is None:
            raise TProtocolException(message='Required field sampler_name is unset!')
        if self.measuring is None:
            raise TProtocolException(message='Required field measuring is unset!')
        if self.max_voltage is None:
            raise TProtocolException(message='Required field max_voltage is unset!')
        if self.min_voltage is None:
            raise TProtocolException(message='Required field min_voltage is unset!')
        if self.sampling_interval is None:
            raise TProtocolException(message='Required field sampling_interval is unset!')
        if self.wave is None:
            raise TProtocolException(message='Required field wave is unset!')
        if self.tau is None:
            raise TProtocolException(message='Required field tau is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSamplingConfig(object):
    """
    Attributes:
     - number_of_waveforms
     - first_percent
     - second_percent
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BYTE, 'number_of_waveforms', None, None, ),  # 1
        (2, TType.DOUBLE, 'first_percent', None, None, ),  # 2
        (3, TType.DOUBLE, 'second_percent', None, None, ),  # 3
    )

    def __init__(self, number_of_waveforms=None, first_percent=None, second_percent=None,):
        self.number_of_waveforms = number_of_waveforms
        self.first_percent = first_percent
        self.second_percent = second_percent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.number_of_waveforms = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.first_percent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.second_percent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TSamplingConfig')
        if self.number_of_waveforms is not None:
            oprot.writeFieldBegin('number_of_waveforms', TType.BYTE, 1)
            oprot.writeByte(self.number_of_waveforms)
            oprot.writeFieldEnd()
        if self.first_percent is not None:
            oprot.writeFieldBegin('first_percent', TType.DOUBLE, 2)
            oprot.writeDouble(self.first_percent)
            oprot.writeFieldEnd()
        if self.second_percent is not None:
            oprot.writeFieldBegin('second_percent', TType.DOUBLE, 3)
            oprot.writeDouble(self.second_percent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.number_of_waveforms is None:
            raise TProtocolException(message='Required field number_of_waveforms is unset!')
        if self.first_percent is None:
            raise TProtocolException(message='Required field first_percent is unset!')
        if self.second_percent is None:
            raise TProtocolException(message='Required field second_percent is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
